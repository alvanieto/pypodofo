# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pypodofo', [dirname(__file__)])
        except ImportError:
            import _pypodofo
            return _pypodofo
        if fp is not None:
            try:
                _mod = imp.load_module('_pypodofo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pypodofo = swig_import_helper()
    del swig_import_helper
else:
    import _pypodofo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class PdfError(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfError, name)
    __repr__ = _swig_repr
    def what(self): return _pypodofo.PdfError_what(self)
    def __init__(self): 
        this = _pypodofo.new_PdfError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pypodofo.delete_PdfError
    __del__ = lambda self : None;
PdfError_swigregister = _pypodofo.PdfError_swigregister
PdfError_swigregister(PdfError)

class PdfMemDocument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfMemDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfMemDocument, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypodofo.new_PdfMemDocument(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pypodofo.delete_PdfMemDocument
    __del__ = lambda self : None;
    def GetPageCount(self): return _pypodofo.PdfMemDocument_GetPageCount(self)
    def GetPage(self, *args): return _pypodofo.PdfMemDocument_GetPage(self, *args)
    def Write(self, *args): return _pypodofo.PdfMemDocument_Write(self, *args)
PdfMemDocument_swigregister = _pypodofo.PdfMemDocument_swigregister
PdfMemDocument_swigregister(PdfMemDocument)

class PdfPage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfPage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfPage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypodofo.new_PdfPage(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetNumFields(self): return _pypodofo.PdfPage_GetNumFields(self)
    def GetField(self, *args): return _pypodofo.PdfPage_GetField(self, *args)
    __swig_destroy__ = _pypodofo.delete_PdfPage
    __del__ = lambda self : None;
PdfPage_swigregister = _pypodofo.PdfPage_swigregister
PdfPage_swigregister(PdfPage)

class PdfField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypodofo.new_PdfField(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetFieldName(self): return _pypodofo.PdfField_GetFieldName(self)
    __swig_destroy__ = _pypodofo.delete_PdfField
    __del__ = lambda self : None;
PdfField_swigregister = _pypodofo.PdfField_swigregister
PdfField_swigregister(PdfField)

class PdfTextField(PdfField):
    __swig_setmethods__ = {}
    for _s in [PdfField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfTextField, name, value)
    __swig_getmethods__ = {}
    for _s in [PdfField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PdfTextField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypodofo.new_PdfTextField(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetText(self, *args): return _pypodofo.PdfTextField_SetText(self, *args)
    def GetText(self): return _pypodofo.PdfTextField_GetText(self)
    __swig_destroy__ = _pypodofo.delete_PdfTextField
    __del__ = lambda self : None;
PdfTextField_swigregister = _pypodofo.PdfTextField_swigregister
PdfTextField_swigregister(PdfTextField)

class PdfListField(PdfField):
    __swig_setmethods__ = {}
    for _s in [PdfField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfListField, name, value)
    __swig_getmethods__ = {}
    for _s in [PdfField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PdfListField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypodofo.new_PdfListField(*args)
        try: self.this.append(this)
        except: self.this = this
    def InsertItem(self, *args): return _pypodofo.PdfListField_InsertItem(self, *args)
    def GetItem(self, *args): return _pypodofo.PdfListField_GetItem(self, *args)
    def RemoveItem(self, *args): return _pypodofo.PdfListField_RemoveItem(self, *args)
    def GetItemCount(self): return _pypodofo.PdfListField_GetItemCount(self)
    def SetSelectedItem(self, *args): return _pypodofo.PdfListField_SetSelectedItem(self, *args)
    def GetSelectedItem(self): return _pypodofo.PdfListField_GetSelectedItem(self)
    __swig_destroy__ = _pypodofo.delete_PdfListField
    __del__ = lambda self : None;
PdfListField_swigregister = _pypodofo.PdfListField_swigregister
PdfListField_swigregister(PdfListField)

class PdfString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypodofo.new_PdfString(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetString(self): return _pypodofo.PdfString_GetString(self)
    __swig_destroy__ = _pypodofo.delete_PdfString
    __del__ = lambda self : None;
PdfString_swigregister = _pypodofo.PdfString_swigregister
PdfString_swigregister(PdfString)

# This file is compatible with both classic and new-style classes.


