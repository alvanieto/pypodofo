# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_api')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_api')
    _api = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_api', [dirname(__file__)])
        except ImportError:
            import _api
            return _api
        try:
            _mod = imp.load_module('_api', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _api = swig_import_helper()
    del swig_import_helper
else:
    import _api
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

ePdfField_PushButton = _api.ePdfField_PushButton
ePdfField_CheckBox = _api.ePdfField_CheckBox
ePdfField_RadioButton = _api.ePdfField_RadioButton
ePdfField_TextField = _api.ePdfField_TextField
ePdfField_ComboBox = _api.ePdfField_ComboBox
ePdfField_ListBox = _api.ePdfField_ListBox
ePdfField_Signature = _api.ePdfField_Signature
ePdfField_Unknown = _api.ePdfField_Unknown
ePdfError_ErrOk = _api.ePdfError_ErrOk
ePdfError_TestFailed = _api.ePdfError_TestFailed
ePdfError_InvalidHandle = _api.ePdfError_InvalidHandle
ePdfError_FileNotFound = _api.ePdfError_FileNotFound
ePdfError_InvalidDeviceOperation = _api.ePdfError_InvalidDeviceOperation
ePdfError_UnexpectedEOF = _api.ePdfError_UnexpectedEOF
ePdfError_OutOfMemory = _api.ePdfError_OutOfMemory
ePdfError_ValueOutOfRange = _api.ePdfError_ValueOutOfRange
ePdfError_InternalLogic = _api.ePdfError_InternalLogic
ePdfError_InvalidEnumValue = _api.ePdfError_InvalidEnumValue
ePdfError_PageNotFound = _api.ePdfError_PageNotFound
ePdfError_NoPdfFile = _api.ePdfError_NoPdfFile
ePdfError_NoXRef = _api.ePdfError_NoXRef
ePdfError_NoTrailer = _api.ePdfError_NoTrailer
ePdfError_NoNumber = _api.ePdfError_NoNumber
ePdfError_NoObject = _api.ePdfError_NoObject
ePdfError_NoEOFToken = _api.ePdfError_NoEOFToken
ePdfError_InvalidTrailerSize = _api.ePdfError_InvalidTrailerSize
ePdfError_InvalidLinearization = _api.ePdfError_InvalidLinearization
ePdfError_InvalidDataType = _api.ePdfError_InvalidDataType
ePdfError_InvalidXRef = _api.ePdfError_InvalidXRef
ePdfError_InvalidXRefStream = _api.ePdfError_InvalidXRefStream
ePdfError_InvalidXRefType = _api.ePdfError_InvalidXRefType
ePdfError_InvalidPredictor = _api.ePdfError_InvalidPredictor
ePdfError_InvalidStrokeStyle = _api.ePdfError_InvalidStrokeStyle
ePdfError_InvalidHexString = _api.ePdfError_InvalidHexString
ePdfError_InvalidStream = _api.ePdfError_InvalidStream
ePdfError_InvalidStreamLength = _api.ePdfError_InvalidStreamLength
ePdfError_InvalidKey = _api.ePdfError_InvalidKey
ePdfError_InvalidName = _api.ePdfError_InvalidName
ePdfError_InvalidEncryptionDict = _api.ePdfError_InvalidEncryptionDict
ePdfError_InvalidPassword = _api.ePdfError_InvalidPassword
ePdfError_InvalidFontFile = _api.ePdfError_InvalidFontFile
ePdfError_InvalidContentStream = _api.ePdfError_InvalidContentStream
ePdfError_UnsupportedFilter = _api.ePdfError_UnsupportedFilter
ePdfError_UnsupportedFontFormat = _api.ePdfError_UnsupportedFontFormat
ePdfError_ActionAlreadyPresent = _api.ePdfError_ActionAlreadyPresent
ePdfError_WrongDestinationType = _api.ePdfError_WrongDestinationType
ePdfError_MissingEndStream = _api.ePdfError_MissingEndStream
ePdfError_Date = _api.ePdfError_Date
ePdfError_Flate = _api.ePdfError_Flate
ePdfError_FreeType = _api.ePdfError_FreeType
ePdfError_SignatureError = _api.ePdfError_SignatureError
ePdfError_MutexError = _api.ePdfError_MutexError
ePdfError_UnsupportedImageFormat = _api.ePdfError_UnsupportedImageFormat
ePdfError_CannotConvertColor = _api.ePdfError_CannotConvertColor
ePdfError_NotImplemented = _api.ePdfError_NotImplemented
ePdfError_DestinationAlreadyPresent = _api.ePdfError_DestinationAlreadyPresent
ePdfError_ChangeOnImmutable = _api.ePdfError_ChangeOnImmutable
ePdfError_NotCompiled = _api.ePdfError_NotCompiled
ePdfError_Unknown = _api.ePdfError_Unknown
class PdfError(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfError, name)
    __repr__ = _swig_repr

    def what(self):
        return _api.PdfError_what(self)

    def GetError(self):
        return _api.PdfError_GetError(self)

    def ErrorMessage(self, eCode):
        return _api.PdfError_ErrorMessage(self, eCode)
    __swig_destroy__ = _api.delete_PdfError
    __del__ = lambda self: None

    def __init__(self):
        this = _api.new_PdfError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
PdfError_swigregister = _api.PdfError_swigregister
PdfError_swigregister(PdfError)

class PdfMemDocument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfMemDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfMemDocument, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _api.new_PdfMemDocument(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _api.delete_PdfMemDocument
    __del__ = lambda self: None

    def GetPageCount(self):
        return _api.PdfMemDocument_GetPageCount(self)

    def GetPage(self, arg2):
        return _api.PdfMemDocument_GetPage(self, arg2)

    def Write(self, arg2):
        return _api.PdfMemDocument_Write(self, arg2)
PdfMemDocument_swigregister = _api.PdfMemDocument_swigregister
PdfMemDocument_swigregister(PdfMemDocument)

class PdfPage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfPage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfPage, name)
    __repr__ = _swig_repr

    def __init__(self, pObject, listOfParents):
        this = _api.new_PdfPage(pObject, listOfParents)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetNumFields(self):
        return _api.PdfPage_GetNumFields(self)

    def GetField(self, arg2):
        return _api.PdfPage_GetField(self, arg2)

    def GetPageNumber(self):
        return _api.PdfPage_GetPageNumber(self)
    __swig_destroy__ = _api.delete_PdfPage
    __del__ = lambda self: None
PdfPage_swigregister = _api.PdfPage_swigregister
PdfPage_swigregister(PdfPage)

class PdfField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfField, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _api.new_PdfField(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetFieldName(self):
        return _api.PdfField_GetFieldName(self)

    def GetPage(self):
        return _api.PdfField_GetPage(self)

    def SetFieldName(self, arg2):
        return _api.PdfField_SetFieldName(self, arg2)

    def GetType(self):
        return _api.PdfField_GetType(self)
    __swig_destroy__ = _api.delete_PdfField
    __del__ = lambda self: None
PdfField_swigregister = _api.PdfField_swigregister
PdfField_swigregister(PdfField)

class PdfTextField(PdfField):
    __swig_setmethods__ = {}
    for _s in [PdfField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfTextField, name, value)
    __swig_getmethods__ = {}
    for _s in [PdfField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PdfTextField, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _api.new_PdfTextField(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetText(self, arg2):
        return _api.PdfTextField_SetText(self, arg2)

    def GetText(self):
        return _api.PdfTextField_GetText(self)

    def SetMaxLen(self, nMaxLen):
        return _api.PdfTextField_SetMaxLen(self, nMaxLen)

    def GetMaxLen(self):
        return _api.PdfTextField_GetMaxLen(self)
    __swig_destroy__ = _api.delete_PdfTextField
    __del__ = lambda self: None
PdfTextField_swigregister = _api.PdfTextField_swigregister
PdfTextField_swigregister(PdfTextField)

class PdfListField(PdfField):
    __swig_setmethods__ = {}
    for _s in [PdfField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfListField, name, value)
    __swig_getmethods__ = {}
    for _s in [PdfField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PdfListField, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _api.new_PdfListField(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InsertItem(self, *args):
        return _api.PdfListField_InsertItem(self, *args)

    def GetItem(self, arg2):
        return _api.PdfListField_GetItem(self, arg2)

    def RemoveItem(self, arg2):
        return _api.PdfListField_RemoveItem(self, arg2)

    def GetItemCount(self):
        return _api.PdfListField_GetItemCount(self)

    def SetSelectedItem(self, arg2):
        return _api.PdfListField_SetSelectedItem(self, arg2)

    def GetSelectedItem(self):
        return _api.PdfListField_GetSelectedItem(self)
    __swig_destroy__ = _api.delete_PdfListField
    __del__ = lambda self: None
PdfListField_swigregister = _api.PdfListField_swigregister
PdfListField_swigregister(PdfListField)

class PdfComboBox(PdfListField):
    __swig_setmethods__ = {}
    for _s in [PdfListField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfComboBox, name, value)
    __swig_getmethods__ = {}
    for _s in [PdfListField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PdfComboBox, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _api.new_PdfComboBox(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetEditable(self, bEdit):
        return _api.PdfComboBox_SetEditable(self, bEdit)

    def IsEditable(self):
        return _api.PdfComboBox_IsEditable(self)
    __swig_destroy__ = _api.delete_PdfComboBox
    __del__ = lambda self: None
PdfComboBox_swigregister = _api.PdfComboBox_swigregister
PdfComboBox_swigregister(PdfComboBox)

class PdfButton(PdfField):
    __swig_setmethods__ = {}
    for _s in [PdfField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfButton, name, value)
    __swig_getmethods__ = {}
    for _s in [PdfField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PdfButton, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _api.new_PdfButton(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsPushButton(self):
        return _api.PdfButton_IsPushButton(self)

    def IsCheckBox(self):
        return _api.PdfButton_IsCheckBox(self)

    def IsRadioButton(self):
        return _api.PdfButton_IsRadioButton(self)

    def SetCaption(self, rsText):
        return _api.PdfButton_SetCaption(self, rsText)

    def GetCaption(self):
        return _api.PdfButton_GetCaption(self)
    __swig_destroy__ = _api.delete_PdfButton
    __del__ = lambda self: None
PdfButton_swigregister = _api.PdfButton_swigregister
PdfButton_swigregister(PdfButton)

class PdfPushButton(PdfButton):
    __swig_setmethods__ = {}
    for _s in [PdfButton]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfPushButton, name, value)
    __swig_getmethods__ = {}
    for _s in [PdfButton]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PdfPushButton, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _api.new_PdfPushButton(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _api.delete_PdfPushButton
    __del__ = lambda self: None
PdfPushButton_swigregister = _api.PdfPushButton_swigregister
PdfPushButton_swigregister(PdfPushButton)

class PdfCheckBox(PdfButton):
    __swig_setmethods__ = {}
    for _s in [PdfButton]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfCheckBox, name, value)
    __swig_getmethods__ = {}
    for _s in [PdfButton]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PdfCheckBox, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _api.new_PdfCheckBox(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetChecked(self, bChecked):
        return _api.PdfCheckBox_SetChecked(self, bChecked)

    def IsChecked(self):
        return _api.PdfCheckBox_IsChecked(self)
    __swig_destroy__ = _api.delete_PdfCheckBox
    __del__ = lambda self: None
PdfCheckBox_swigregister = _api.PdfCheckBox_swigregister
PdfCheckBox_swigregister(PdfCheckBox)

class PdfString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfString, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, pEncoding=None):
        this = _api.new_PdfString(arg2, pEncoding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetString(self):
        return _api.PdfString_GetString(self)
    __swig_destroy__ = _api.delete_PdfString
    __del__ = lambda self: None
PdfString_swigregister = _api.PdfString_swigregister
PdfString_swigregister(PdfString)

# This file is compatible with both classic and new-style classes.


